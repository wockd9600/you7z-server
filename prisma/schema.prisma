generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GameRoom {
  room_id   Int      @id @default(autoincrement())
  roomCode  String   @map("room_code") @db.VarChar(16)
  status    Int      @default(0) @db.TinyInt
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)

  @@map("game_room")
}

model GameSession {
  sessionId      Int          @id @default(autoincrement()) @map("session_id")
  room_id        Int
  userId         Int          @map("user_id")
  playlistId     Int          @map("playlist_id")
  question_order String?      @db.VarChar(255)
  game_type      Int          @default(1) @db.TinyInt
  goalScore      Int          @default(15) @map("goal_score") @db.UnsignedTinyInt
  status         Int          @default(0) @db.TinyInt
  createdAt      DateTime     @default(now()) @map("created_at") @db.DateTime(0)
  game_player    GamePlayer[]
  user           User         @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "game_session_ibfk_2")
  playlist       Playlist     @relation(fields: [playlistId], references: [playlistId], onUpdate: Restrict, map: "game_session_ibfk_3")
  user_answer    UserAnswer[]

  @@index([playlistId], map: "playlistId")
  @@index([userId], map: "userId")
  @@map("game_session")
}

model Playlist {
  playlistId     Int           @id @default(autoincrement()) @map("playlist_id")
  userId         Int           @map("user_id")
  title          String        @db.VarChar(45)
  description    String?       @db.VarChar(300)
  length         Int?          @db.TinyInt
  download_count Int           @default(0) @db.TinyInt
  status         Int           @default(0) @db.TinyInt
  created_at     DateTime      @default(now()) @db.DateTime(0)
  game_session   GameSession[]
  user           User          @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "playlist_ibfk_1")
  song           Song[]

  @@index([userId], map: "userId")
  @@map("playlist")
}

model Song {
  songId      Int      @id @default(autoincrement()) @map("song_id")
  playlistId  Int      @map("playlist_id")
  url         String   @db.VarChar(128)
  start_time  String?  @db.VarChar(128)
  answer      String?  @db.VarChar(128)
  description String?  @db.VarChar(128)
  pass_count  Int      @default(0)
  created_at  DateTime @default(now()) @db.DateTime(0)
  is_delete   Int      @default(0) @db.TinyInt
  playlist    Playlist @relation(fields: [playlistId], references: [playlistId], onUpdate: Restrict, map: "song_ibfk_1")

  @@index([playlistId], map: "playlistId")
  @@map("song")
}

model User {
  userId        Int           @id @default(autoincrement()) @map("user_id")
  kakaoId       String        @unique(map: "kakao_id") @map("kakao_id") @db.VarChar(20)
  refresh_token String?       @db.VarChar(64)
  status        Int           @default(0) @db.TinyInt
  created_at    DateTime      @default(now()) @db.DateTime(0)
  game_player   GamePlayer[]
  game_session  GameSession[]
  playlist      Playlist[]
  user_answer   UserAnswer[]
  user_profile  UserProfile[]

  @@map("user")
}

model UserAnswer {
  answer_id    Int         @id @default(autoincrement())
  sessionId    Int         @map("session_id")
  userId       Int         @map("user_id")
  content      String      @db.VarChar(64)
  is_alert     Int         @default(0) @db.TinyInt
  created_at   DateTime    @default(now()) @db.DateTime(0)
  game_session GameSession @relation(fields: [sessionId], references: [sessionId], onUpdate: Restrict, map: "user_answer_ibfk_1")
  user         User        @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "user_answer_ibfk_2")

  @@index([sessionId], map: "sessionId")
  @@index([userId], map: "userId")
  @@map("user_answer")
}

model UserProfile {
  profile_id Int      @id @default(autoincrement())
  userId     Int      @unique @map("user_id")
  nickname   String   @db.VarChar(20)
  created_at DateTime @default(now()) @db.DateTime(0)
  user       User     @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "user_profile_ibfk_1")

  @@index([userId], map: "userId")
  @@map("user_profile")
}

model GamePlayer {
  playerId     Int         @id @default(autoincrement()) @map("player_id") @db.UnsignedInt
  sessionId    Int         @map("session_id")
  userId       Int         @map("user_id")
  score        Int         @default(0)
  status       Int         @default(0) @db.TinyInt
  created_at   DateTime    @default(now()) @db.DateTime(0)
  game_session GameSession @relation(fields: [sessionId], references: [sessionId], onUpdate: Restrict, map: "game_player_ibfk_1")
  user         User        @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "game_player_ibfk_2")

  @@index([sessionId], map: "sessionId")
  @@index([userId], map: "userId")
  @@map("game_player")
}
